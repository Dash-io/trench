// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "fullTextSearch", "filteredRelationCount"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id        String   @id @default(cuid())
  customId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String? @unique
  name     String?
  phone    String?
  metadata Json    @default("{}")

  sessions Session[]

  paymentMethodLinks  UserPaymentMethodLink[]
  paymentAttemptLinks UserPaymentAttemptLink[]
  deviceLinks         UserDeviceLink[]
  cardLinks           UserCardLink[]
  ipAddressLinks      UserIpAddressLink[]
}

model SessionType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  sessions Session[]
  rules    RuleToSessionType[]
}

model Session {
  id        String   @id @default(cuid())
  customId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type   SessionType @relation(fields: [typeId], references: [id])
  typeId String

  user           User?           @relation(fields: [userId], references: [id])
  userId         String?
  deviceSnapshot DeviceSnapshot?

  events           Event[]
  evaluableActions EvaluableAction[]
}

model EvaluableAction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transformsOutput Json?    
  riskLevel        String?
  
  isFraud          Boolean @default(false)

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  paymentAttempt PaymentAttempt?

  ruleExecutions RuleExecution[]
}

model Event {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type    String
  properties Json   @default("{}")

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String
}

model DeviceSnapshot {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionId String  @unique
  session   Session @relation(fields: [sessionId], references: [id])

  device   Device @relation(fields: [deviceId], references: [id])
  deviceId String

  ipAddress   IpAddress? @relation(fields: [ipAddressId], references: [id])
  ipAddressId String?

  fingerprint String?
  userAgent   String?

  browserName     String?
  browserVersion  String?
  deviceModel     String?
  deviceType      String?
  deviceVendor    String?
  engineName      String?
  engineVersion   String?
  osName          String?
  osVersion       String?
  cpuArchitecture String?

  isIncognito Boolean?

  reqUserAgent String?

  screenResolution String?
  timezone         String?

  metadata Json @default("{}")
}

model Device {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  deviceSnapshots DeviceSnapshot[]

  userLinks      UserDeviceLink[]
  ipAddressLinks DeviceIpAddressLink[]
}

// Locations

model Location {
  id        String @id @default(cuid())
  latitude  Float?
  longitude Float?

  cityGeonameId  Int?
  cityName       String?
  countryISOCode String?
  countryName    String?

  postalCode    String?
  regionISOCode String?
  regionName    String?

  ipAddresses IpAddress[]
  addresses   Address[]
}

model IpAddress {
  id        String   @id @default(cuid())
  ipAddress String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?

  metadata Json @default("{}")

  deviceSnapshots DeviceSnapshot[]

  deviceLinks         DeviceIpAddressLink[]
  userLinks           UserIpAddressLink[]
  cardLinks           CardIpAddressLink[]
  paymentAttemptLinks PaymentAttemptIpAddressLink[]
}

model Address {
  id         String  @id @default(cuid())
  city       String?
  country    String?
  line1      String?
  line2      String?
  postalCode String?
  state      String?

  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?

  paymentMethods  PaymentMethod[]
  paymentAttempts PaymentAttempt[]
}

// Rules

model RuleSnapshot {
  id           String          @id @default(cuid())
  updatedAt    DateTime        @updatedAt
  createdAt    DateTime        @default(now())

  name         String
  description  String?
  tsCode       String
  jsCode       String
  riskLevel    String

  rule        Rule?     @relation("ruleSnapshots", fields: [ruleId], references: [id])
  ruleId       String?

  currentRule Rule? @relation("currentRuleSnapshot")

  executions RuleExecution[]
}

model Rule {
  id           String          @id @default(cuid())
  updatedAt    DateTime        @updatedAt
  createdAt    DateTime        @default(now())


  currentRuleSnapshot RuleSnapshot @relation("currentRuleSnapshot", fields: [currentRuleSnapshotId], references: [id])
  currentRuleSnapshotId String @unique

  ruleSnapshots RuleSnapshot[] @relation("ruleSnapshots")
  sessionTypes RuleToSessionType[]
}

model RuleToSessionType {
  id           String   @id @default(cuid())
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  rule         Rule     @relation(fields: [ruleId], references: [id])
  ruleId       String

  sessionType  SessionType @relation(fields: [sessionTypeId], references: [id])
  sessionTypeId String

  @@unique([ruleId, sessionTypeId])
}

model RuleExecution {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  evaluableAction   EvaluableAction @relation(fields: [evaluableActionId], references: [id])
  evaluableActionId String

  ruleSnapshot              RuleSnapshot            @relation(fields: [ruleSnapshotId], references: [id])
  ruleSnapshotId            String

  result            Boolean?
  error             String?
  riskLevel         String

  @@unique([evaluableActionId, ruleSnapshotId])
}

// Lists

model List {
  id        String     @id @default(cuid())
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  name      String
  alias     String     @unique
  regex     String?
  createdBy String
  items     ListItem[]
}

model ListItem {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  value     String
  listId    String
  list      List     @relation(fields: [listId], references: [id])
  createdBy String

  @@unique([listId, value])
}

// Evaluable Action Types

// Evaluable Action Type: Payment Attempt
model Card {
  id          String   @id @default(cuid())
  fingerprint String   @unique
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  bin         String?
  brand       String
  country     String?
  last4       String
  funding     String?
  issuer      String?
  expiryMonth Int?
  expiryYear  Int?

  threeDSecureSupported Boolean?

  paymentMethods PaymentMethod[]

  userLinks      UserCardLink[]
  ipAddressLinks CardIpAddressLink[]
}

model PaymentMethod {
  id        String   @id @default(cuid())
  customId  String?  @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  name      String?
  email     String?
  addressId String?
  address   Address? @relation(fields: [addressId], references: [id])

  cvcCheck          String?
  addressLine1Check String?
  postalCodeCheck   String?

  card   Card?   @relation(fields: [cardId], references: [id])
  cardId String?

  cardWallet      String?
  paymentAttempts PaymentAttempt[]

  userLink UserPaymentMethodLink?
}

model PaymentAttempt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount      Int
  currency    String
  description String?
  metadata    Json    @default("{}")

  evaluableAction   EvaluableAction @relation(fields: [evaluableActionId], references: [id])
  evaluableActionId String          @unique

  outcome PaymentOutcome?

  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String

  shippingName      String?
  shippingPhone     String?
  shippingAddress   Address? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?

  ipAddressLinks PaymentAttemptIpAddressLink[]
  userLink       UserPaymentAttemptLink?
}

enum PaymentOutcomeStatus {
  SUCCEEDED
  FAILED
  PENDING
}

model PaymentOutcome {
  id        String   @id @default(cuid())
  customId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status                   PaymentOutcomeStatus
  stripeOutcome            StripePaymentOutcome?
  threeDSecureFlow         String?
  threeDSecureResult       String?
  threeDSecureResultReason String?
  threeDSecureVersion      String?

  paymentAttempt   PaymentAttempt @relation(fields: [paymentAttemptId], references: [id])
  paymentAttemptId String         @unique
}

model StripePaymentOutcome {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  networkStatus    String?
  reason           String?
  riskLevel        String?
  riskScore        Int?
  rule             Json?
  sellerMessage    String?
  type             String?
  paymentOutcome   PaymentOutcome @relation(fields: [paymentOutcomeId], references: [id])
  paymentOutcomeId String         @unique
}

// Views

view UserPaymentMethodLink {
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String        @unique

  firstSeen DateTime
  lastSeen  DateTime

  @@id([paymentMethodId, userId])
}

view UserPaymentAttemptLink {
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  paymentAttempt   PaymentAttempt @relation(fields: [paymentAttemptId], references: [id])
  paymentAttemptId String         @unique

  firstSeen DateTime
  lastSeen  DateTime

  @@id([paymentAttemptId, userId])
}

view UserDeviceLink {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  device   Device @relation(fields: [deviceId], references: [id])
  deviceId String

  firstSeen DateTime
  lastSeen  DateTime

  @@id([deviceId, userId])
}

view UserCardLink {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  card   Card   @relation(fields: [cardId], references: [id])
  cardId String

  firstSeen DateTime
  lastSeen  DateTime

  @@id([cardId, userId])
}

view UserIpAddressLink {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  ipAddress   IpAddress @relation(fields: [ipAddressId], references: [id])
  ipAddressId String

  firstSeen DateTime
  lastSeen  DateTime

  @@id([userId, ipAddressId])
}

view PaymentAttemptIpAddressLink {
  paymentAttempt   PaymentAttempt @relation(fields: [paymentAttemptId], references: [id])
  paymentAttemptId String
  ipAddress        IpAddress      @relation(fields: [ipAddressId], references: [id])
  ipAddressId      String

  @@id([paymentAttemptId, ipAddressId])
}

view DeviceIpAddressLink {
  deviceId    String
  device      Device    @relation(fields: [deviceId], references: [id])
  ipAddressId String
  ipAddress   IpAddress @relation(fields: [ipAddressId], references: [id])

  firstSeen DateTime
  lastSeen  DateTime

  @@id([deviceId, ipAddressId])
}

view CardIpAddressLink {
  createdAt   DateTime  @default(now())
  cardId      String
  card        Card      @relation(fields: [cardId], references: [id])
  ipAddressId String
  ipAddress   IpAddress @relation(fields: [ipAddressId], references: [id])

  firstSeen DateTime
  lastSeen  DateTime

  @@id([cardId, ipAddressId])
}
