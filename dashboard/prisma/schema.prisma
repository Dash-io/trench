// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "fullTextSearch", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PaymentAttempt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount      Int
  currency    String
  description String?
  metadata    Json    @default("{}")

  assessment PaymentAttemptAssessment?
  outcome    PaymentOutcome?

  checkoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id])
  checkoutSessionId String

  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String

  billingAddress   BillingAddress? @relation(fields: [billingAddressId], references: [id])
  billingAddressId String?

  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?

  ruleExecutions RuleExecution[]

  ipAddresseLinks PaymentAttemptIpAddressLink[]
  customerLink    CustomerPaymentAttemptLink?
}

model PaymentAttemptAssessment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transformsOutput Json    @default("{}")
  isFraud          Boolean @default(false)
  riskLevel        String

  paymentAttempt   PaymentAttempt @relation(fields: [paymentAttemptId], references: [id])
  paymentAttemptId String         @unique
}

enum PaymentOutcomeStatus {
  Succeeded
  Failed
  Pending
}

model PaymentOutcome {
  id        String   @id @default(cuid())
  customId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status                   PaymentOutcomeStatus
  reason                   String
  stripeData               Json?
  threeDSecureFlow         String?
  threeDSecureResult       String?
  threeDSecureResultReason String?
  threeDSecureVersion      String?

  paymentAttempt   PaymentAttempt @relation(fields: [paymentAttemptId], references: [id])
  paymentAttemptId String         @unique
}

model Customer {
  id        String   @id @default(cuid())
  customId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String?
  email       String?
  phoneNumber String?
  metadata    Json    @default("{}")

  checkoutSessions CheckoutSession[]

  deviceLinks         CustomerDeviceLink[]
  cardLinks           CustomerCardLink[]
  ipAddressLinks      CustomerIpAddressLink[]
  paymentMethodLinks  CustomerPaymentMethodLink[]
  paymentAttemptLinks CustomerPaymentAttemptLink[]
}

model CheckoutSession {
  id        String   @id @default(cuid())
  customId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer       Customer?       @relation(fields: [customerId], references: [id])
  customerId     String?
  deviceSnapshot DeviceSnapshot?

  events          Event[]
  paymentAttempts PaymentAttempt[]
}

model Event {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type    String
  payload Json   @default("{}")

  checkoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id])
  checkoutSessionId String
}

model DeviceSnapshot {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  device   Device @relation(fields: [deviceId], references: [id])
  deviceId String

  ipAddress   IpAddress? @relation(fields: [ipAddressId], references: [id])
  ipAddressId String?

  checkoutSessionId String          @unique
  checkoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id])

  fingerprint String?
  userAgent   String?

  browserName     String?
  browserVersion  String?
  deviceModel     String?
  deviceType      String?
  deviceVendor    String?
  engineName      String?
  engineVersion   String?
  osName          String?
  osVersion       String?
  cpuArchitecture String?

  isIncognito Boolean?

  reqUserAgent String?

  screenResolution String?
  timezone         String?

  metadata Json @default("{}")
}

model Device {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  deviceSnapshots DeviceSnapshot[]

  customerLinks  CustomerDeviceLink[]
  ipAddressLinks DeviceIpAddressLink[]
}

model PaymentMethod {
  id        String   @id @default(cuid())
  customId  String?  @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  name      String?
  email     String?
  addressId String?
  address   Address? @relation(fields: [addressId], references: [id])

  cvcCheck          String?
  addressLine1Check String?
  postalCodeCheck   String?

  card   Card?   @relation(fields: [cardId], references: [id])
  cardId String?

  cardWallet      String?
  paymentAttempts PaymentAttempt[]

  customerLink CustomerPaymentMethodLink?
}

model Card {
  id          String   @id @default(cuid())
  fingerprint String   @unique
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  bin         String?
  brand       String
  country     String?
  last4       String
  funding     String?
  issuer      String?
  expiryMonth Int?
  expiryYear  Int?

  threeDSecureSupported Boolean?

  paymentMethods PaymentMethod[]

  customerLinks  CustomerCardLink[]
  ipAddressLinks CardIpAddressLink[]
}

// Locations

model Location {
  id        String @id @default(cuid())
  latitude  Float?
  longitude Float?

  cityGeonameId Int?
  cityName      String?
  countryCode   String?
  countryName   String?

  postalCode    String?
  regionISOCode String?
  regionName    String?

  ipAddresses IpAddress[]
  addresses   Address[]
}

model IpAddress {
  id        String   @id @default(cuid())
  ipAddress String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?

  metadata Json @default("{}")

  deviceSnapshots DeviceSnapshot[]

  deviceLinks         DeviceIpAddressLink[]
  customerLinks       CustomerIpAddressLink[]
  cardLinks           CardIpAddressLink[]
  paymentAttemptLinks PaymentAttemptIpAddressLink[]
}

model Address {
  id         String  @id @default(cuid())
  city       String?
  country    String?
  line1      String?
  line2      String?
  postalCode String?
  state      String?

  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?

  billingAddresses  BillingAddress[]
  shippingAddresses ShippingAddress[]
  paymentMethods    PaymentMethod[]
}

model ShippingAddress {
  id          String  @id @default(cuid())
  customId    String? @unique
  name        String?
  phoneNumber String?

  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  paymentAttempts PaymentAttempt[]
}

model BillingAddress {
  id          String  @id @default(cuid())
  customId    String? @unique
  name        String?
  phoneNumber String?

  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  paymentAttempts PaymentAttempt[]
}

// Rules

model Rule {
  id          String          @id @default(cuid())
  updatedAt   DateTime        @updatedAt
  createdAt   DateTime        @default(now())
  name        String
  description String?
  tsCode      String
  jsCode      String
  riskLevel   String
  executions  RuleExecution[]
}

model RuleExecution {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  paymentAttemptId String
  paymentAttempt   PaymentAttempt @relation(fields: [paymentAttemptId], references: [id])
  ruleId           String
  rule             Rule           @relation(fields: [ruleId], references: [id])
  result           Boolean?
  error            String?
  riskLevel        String

  @@unique([paymentAttemptId, ruleId])
}

// Lists

model List {
  id        String     @id @default(cuid())
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  name      String
  alias     String     @unique
  regex     String?
  createdBy String
  items     ListItem[]
}

model ListItem {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  value     String
  listId    String
  list      List     @relation(fields: [listId], references: [id])
  createdBy String

  @@unique([listId, value])
}

// Views

view CustomerPaymentMethodLink {
  customer        Customer      @relation(fields: [customerId], references: [id])
  customerId      String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String        @unique

  firstSeen DateTime
  lastSeen  DateTime

  @@id([paymentMethodId, customerId])
}

view CustomerPaymentAttemptLink {
  customer         Customer       @relation(fields: [customerId], references: [id])
  customerId       String
  paymentAttempt   PaymentAttempt @relation(fields: [paymentAttemptId], references: [id])
  paymentAttemptId String         @unique

  firstSeen DateTime
  lastSeen  DateTime

  @@id([paymentAttemptId, customerId])
}

view CustomerDeviceLink {
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  device     Device   @relation(fields: [deviceId], references: [id])
  deviceId   String

  firstSeen DateTime
  lastSeen  DateTime

  @@id([deviceId, customerId])
}

view CustomerCardLink {
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  card       Card     @relation(fields: [cardId], references: [id])
  cardId     String

  firstSeen DateTime
  lastSeen  DateTime

  @@id([cardId, customerId])
}

view CustomerIpAddressLink {
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
  ipAddress   IpAddress @relation(fields: [ipAddressId], references: [id])
  ipAddressId String

  firstSeen DateTime
  lastSeen  DateTime

  @@id([customerId, ipAddressId])
}

view PaymentAttemptIpAddressLink {
  paymentAttempt   PaymentAttempt @relation(fields: [paymentAttemptId], references: [id])
  paymentAttemptId String
  ipAddress        IpAddress      @relation(fields: [ipAddressId], references: [id])
  ipAddressId      String

  @@id([paymentAttemptId, ipAddressId])
}

view DeviceIpAddressLink {
  deviceId    String
  device      Device    @relation(fields: [deviceId], references: [id])
  ipAddressId String
  ipAddress   IpAddress @relation(fields: [ipAddressId], references: [id])

  firstSeen DateTime
  lastSeen  DateTime

  @@id([deviceId, ipAddressId])
}

view CardIpAddressLink {
  createdAt   DateTime  @default(now())
  cardId      String
  card        Card      @relation(fields: [cardId], references: [id])
  ipAddressId String
  ipAddress   IpAddress @relation(fields: [ipAddressId], references: [id])

  firstSeen DateTime
  lastSeen  DateTime

  @@id([cardId, ipAddressId])
}
